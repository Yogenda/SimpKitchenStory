{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./login.service\";\nexport class AuthInterceptor {\n  constructor(loginService) {\n    this.loginService = loginService;\n  }\n  intercept(req, next) {\n    let newReq = req;\n    let token = this.loginService.getToken();\n    if (token != null) {\n      newReq = newReq.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(newReq);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.LoginService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,eAAe;EACxBC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;EAAkB;EAClDC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAC9C,IAAIC,MAAM,GAAGF,GAAG;IAChB,IAAIG,KAAK,GAAG,IAAI,CAACL,YAAY,CAACM,QAAQ,EAAE;IAExC,IAAID,KAAK,IAAI,IAAI,EAAE;MACfD,MAAM,GAAGA,MAAM,CAACG,KAAK,CAAC;QAAEC,UAAU,EAAE;UAAEC,aAAa,EAAE,UAAUJ,KAAK;QAAE;MAAE,CAAE,CAAC;;IAE/E,OAAOF,IAAI,CAACO,MAAM,CAACN,MAAM,CAAC;EAC9B;;AAVSN,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAa,SAAfb,eAAe;AAAA","names":["AuthInterceptor","constructor","loginService","intercept","req","next","newReq","token","getToken","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["D:\\web\\Phase4_Project_Kitchen_Story-master\\Frontend_Angular\\src\\app\\Services\\auth.interceptor.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { LoginService } from \"./login.service\";\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n    constructor(private loginService: LoginService) { }\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        let newReq = req;\n        let token = this.loginService.getToken()\n\n        if (token != null) {\n            newReq = newReq.clone({ setHeaders: { Authorization: `Bearer ${token}` } })\n        }\n        return next.handle(newReq)\n    }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}